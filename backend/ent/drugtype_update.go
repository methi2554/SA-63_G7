// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/methi2554/app/ent/drug"
	"github.com/methi2554/app/ent/drugtype"
	"github.com/methi2554/app/ent/predicate"
)

// DrugTypeUpdate is the builder for updating DrugType entities.
type DrugTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *DrugTypeMutation
	predicates []predicate.DrugType
}

// Where adds a new predicate for the builder.
func (dtu *DrugTypeUpdate) Where(ps ...predicate.DrugType) *DrugTypeUpdate {
	dtu.predicates = append(dtu.predicates, ps...)
	return dtu
}

// SetName sets the name field.
func (dtu *DrugTypeUpdate) SetName(s string) *DrugTypeUpdate {
	dtu.mutation.SetName(s)
	return dtu
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (dtu *DrugTypeUpdate) AddDrugIDs(ids ...int) *DrugTypeUpdate {
	dtu.mutation.AddDrugIDs(ids...)
	return dtu
}

// AddDrug adds the drug edges to Drug.
func (dtu *DrugTypeUpdate) AddDrug(d ...*Drug) *DrugTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.AddDrugIDs(ids...)
}

// Mutation returns the DrugTypeMutation object of the builder.
func (dtu *DrugTypeUpdate) Mutation() *DrugTypeMutation {
	return dtu.mutation
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (dtu *DrugTypeUpdate) RemoveDrugIDs(ids ...int) *DrugTypeUpdate {
	dtu.mutation.RemoveDrugIDs(ids...)
	return dtu
}

// RemoveDrug removes drug edges to Drug.
func (dtu *DrugTypeUpdate) RemoveDrug(d ...*Drug) *DrugTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.RemoveDrugIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dtu *DrugTypeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(dtu.hooks) == 0 {
		affected, err = dtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dtu.mutation = mutation
			affected, err = dtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dtu.hooks) - 1; i >= 0; i-- {
			mut = dtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DrugTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DrugTypeUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DrugTypeUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtu *DrugTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drugtype.Table,
			Columns: drugtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drugtype.FieldID,
			},
		},
	}
	if ps := dtu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drugtype.FieldName,
		})
	}
	if nodes := dtu.mutation.RemovedDrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drugtype.DrugTable,
			Columns: []string{drugtype.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drugtype.DrugTable,
			Columns: []string{drugtype.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drugtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DrugTypeUpdateOne is the builder for updating a single DrugType entity.
type DrugTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *DrugTypeMutation
}

// SetName sets the name field.
func (dtuo *DrugTypeUpdateOne) SetName(s string) *DrugTypeUpdateOne {
	dtuo.mutation.SetName(s)
	return dtuo
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (dtuo *DrugTypeUpdateOne) AddDrugIDs(ids ...int) *DrugTypeUpdateOne {
	dtuo.mutation.AddDrugIDs(ids...)
	return dtuo
}

// AddDrug adds the drug edges to Drug.
func (dtuo *DrugTypeUpdateOne) AddDrug(d ...*Drug) *DrugTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.AddDrugIDs(ids...)
}

// Mutation returns the DrugTypeMutation object of the builder.
func (dtuo *DrugTypeUpdateOne) Mutation() *DrugTypeMutation {
	return dtuo.mutation
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (dtuo *DrugTypeUpdateOne) RemoveDrugIDs(ids ...int) *DrugTypeUpdateOne {
	dtuo.mutation.RemoveDrugIDs(ids...)
	return dtuo
}

// RemoveDrug removes drug edges to Drug.
func (dtuo *DrugTypeUpdateOne) RemoveDrug(d ...*Drug) *DrugTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.RemoveDrugIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (dtuo *DrugTypeUpdateOne) Save(ctx context.Context) (*DrugType, error) {

	var (
		err  error
		node *DrugType
	)
	if len(dtuo.hooks) == 0 {
		node, err = dtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dtuo.mutation = mutation
			node, err = dtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtuo.hooks) - 1; i >= 0; i-- {
			mut = dtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DrugTypeUpdateOne) SaveX(ctx context.Context) *DrugType {
	dt, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return dt
}

// Exec executes the query on the entity.
func (dtuo *DrugTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DrugTypeUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtuo *DrugTypeUpdateOne) sqlSave(ctx context.Context) (dt *DrugType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drugtype.Table,
			Columns: drugtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drugtype.FieldID,
			},
		},
	}
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DrugType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := dtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drugtype.FieldName,
		})
	}
	if nodes := dtuo.mutation.RemovedDrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drugtype.DrugTable,
			Columns: []string{drugtype.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drugtype.DrugTable,
			Columns: []string{drugtype.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	dt = &DrugType{config: dtuo.config}
	_spec.Assign = dt.assignValues
	_spec.ScanValues = dt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drugtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return dt, nil
}
