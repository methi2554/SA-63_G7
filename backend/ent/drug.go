// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/methi2554/app/ent/disease"
	"github.com/methi2554/app/ent/drug"
	"github.com/methi2554/app/ent/drugtype"
	"github.com/methi2554/app/ent/employee"
)

// Drug is the model entity for the Drug schema.
type Drug struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Howto holds the value of the "howto" field.
	Howto string `json:"howto,omitempty"`
	// Property holds the value of the "property" field.
	Property string `json:"property,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DrugQuery when eager-loading is set.
	Edges          DrugEdges `json:"edges"`
	disease_drug   *int
	drug_type_drug *int
	employee_drug  *int
}

// DrugEdges holds the relations/edges for other nodes in the graph.
type DrugEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Drugtype holds the value of the drugtype edge.
	Drugtype *DrugType
	// Disease holds the value of the disease edge.
	Disease *Disease
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// DrugtypeOrErr returns the Drugtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) DrugtypeOrErr() (*DrugType, error) {
	if e.loadedTypes[1] {
		if e.Drugtype == nil {
			// The edge drugtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: drugtype.Label}
		}
		return e.Drugtype, nil
	}
	return nil, &NotLoadedError{edge: "drugtype"}
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) DiseaseOrErr() (*Disease, error) {
	if e.loadedTypes[2] {
		if e.Disease == nil {
			// The edge disease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Drug) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // howto
		&sql.NullString{}, // property
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Drug) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // disease_drug
		&sql.NullInt64{}, // drug_type_drug
		&sql.NullInt64{}, // employee_drug
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Drug fields.
func (d *Drug) assignValues(values ...interface{}) error {
	if m, n := len(values), len(drug.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		d.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field howto", values[1])
	} else if value.Valid {
		d.Howto = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field property", values[2])
	} else if value.Valid {
		d.Property = value.String
	}
	values = values[3:]
	if len(values) == len(drug.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disease_drug", value)
		} else if value.Valid {
			d.disease_drug = new(int)
			*d.disease_drug = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field drug_type_drug", value)
		} else if value.Valid {
			d.drug_type_drug = new(int)
			*d.drug_type_drug = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_drug", value)
		} else if value.Valid {
			d.employee_drug = new(int)
			*d.employee_drug = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Drug.
func (d *Drug) QueryEmployee() *EmployeeQuery {
	return (&DrugClient{config: d.config}).QueryEmployee(d)
}

// QueryDrugtype queries the drugtype edge of the Drug.
func (d *Drug) QueryDrugtype() *DrugTypeQuery {
	return (&DrugClient{config: d.config}).QueryDrugtype(d)
}

// QueryDisease queries the disease edge of the Drug.
func (d *Drug) QueryDisease() *DiseaseQuery {
	return (&DrugClient{config: d.config}).QueryDisease(d)
}

// Update returns a builder for updating this Drug.
// Note that, you need to call Drug.Unwrap() before calling this method, if this Drug
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Drug) Update() *DrugUpdateOne {
	return (&DrugClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Drug) Unwrap() *Drug {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Drug is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Drug) String() string {
	var builder strings.Builder
	builder.WriteString("Drug(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", howto=")
	builder.WriteString(d.Howto)
	builder.WriteString(", property=")
	builder.WriteString(d.Property)
	builder.WriteByte(')')
	return builder.String()
}

// Drugs is a parsable slice of Drug.
type Drugs []*Drug

func (d Drugs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
