// Code generated by entc, DO NOT EDIT.

package drug

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/methi2554/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Howto applies equality check predicate on the "howto" field. It's identical to HowtoEQ.
func Howto(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHowto), v))
	})
}

// Property applies equality check predicate on the "property" field. It's identical to PropertyEQ.
func Property(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProperty), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HowtoEQ applies the EQ predicate on the "howto" field.
func HowtoEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHowto), v))
	})
}

// HowtoNEQ applies the NEQ predicate on the "howto" field.
func HowtoNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHowto), v))
	})
}

// HowtoIn applies the In predicate on the "howto" field.
func HowtoIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHowto), v...))
	})
}

// HowtoNotIn applies the NotIn predicate on the "howto" field.
func HowtoNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHowto), v...))
	})
}

// HowtoGT applies the GT predicate on the "howto" field.
func HowtoGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHowto), v))
	})
}

// HowtoGTE applies the GTE predicate on the "howto" field.
func HowtoGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHowto), v))
	})
}

// HowtoLT applies the LT predicate on the "howto" field.
func HowtoLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHowto), v))
	})
}

// HowtoLTE applies the LTE predicate on the "howto" field.
func HowtoLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHowto), v))
	})
}

// HowtoContains applies the Contains predicate on the "howto" field.
func HowtoContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHowto), v))
	})
}

// HowtoHasPrefix applies the HasPrefix predicate on the "howto" field.
func HowtoHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHowto), v))
	})
}

// HowtoHasSuffix applies the HasSuffix predicate on the "howto" field.
func HowtoHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHowto), v))
	})
}

// HowtoEqualFold applies the EqualFold predicate on the "howto" field.
func HowtoEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHowto), v))
	})
}

// HowtoContainsFold applies the ContainsFold predicate on the "howto" field.
func HowtoContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHowto), v))
	})
}

// PropertyEQ applies the EQ predicate on the "property" field.
func PropertyEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProperty), v))
	})
}

// PropertyNEQ applies the NEQ predicate on the "property" field.
func PropertyNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProperty), v))
	})
}

// PropertyIn applies the In predicate on the "property" field.
func PropertyIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProperty), v...))
	})
}

// PropertyNotIn applies the NotIn predicate on the "property" field.
func PropertyNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProperty), v...))
	})
}

// PropertyGT applies the GT predicate on the "property" field.
func PropertyGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProperty), v))
	})
}

// PropertyGTE applies the GTE predicate on the "property" field.
func PropertyGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProperty), v))
	})
}

// PropertyLT applies the LT predicate on the "property" field.
func PropertyLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProperty), v))
	})
}

// PropertyLTE applies the LTE predicate on the "property" field.
func PropertyLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProperty), v))
	})
}

// PropertyContains applies the Contains predicate on the "property" field.
func PropertyContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProperty), v))
	})
}

// PropertyHasPrefix applies the HasPrefix predicate on the "property" field.
func PropertyHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProperty), v))
	})
}

// PropertyHasSuffix applies the HasSuffix predicate on the "property" field.
func PropertyHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProperty), v))
	})
}

// PropertyEqualFold applies the EqualFold predicate on the "property" field.
func PropertyEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProperty), v))
	})
}

// PropertyContainsFold applies the ContainsFold predicate on the "property" field.
func PropertyContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProperty), v))
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDrugtype applies the HasEdge predicate on the "drugtype" edge.
func HasDrugtype() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugtypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DrugtypeTable, DrugtypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDrugtypeWith applies the HasEdge predicate on the "drugtype" edge with a given conditions (other predicates).
func HasDrugtypeWith(preds ...predicate.DrugType) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugtypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DrugtypeTable, DrugtypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		p(s.Not())
	})
}
